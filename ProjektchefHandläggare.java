package SDGSweden;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author fredde
 */
public class ProjektchefHandläggare extends javax.swing.JFrame {
    private String pid;
    private String aid;
    private InfDB idb;
    private Validering validering;
    /**
     * Creates new form ProjektchefHandläggare
     */
    public ProjektchefHandläggare(InfDB idb, String aid,String pid, Validering validering) {
        this.idb = idb;
        this.aid = aid;
        this.pid = pid;
        this.validering = validering;
        initComponents();
        populateHandlaggarComboBox();
        displayStaff();
    }
    
    private void displayStaff() {
        try {

        String query = "SELECT a.aid + 0 AS anstalld_id, a.fornamn, a.efternamn, ap.pid " +
                       "FROM anstalld a " +
                       "JOIN ans_proj ap ON a.aid = ap.aid " +
                       "WHERE ap.pid = '" + pid + "'";
        
        //System.out.println(query);
    
        ArrayList<HashMap<String, String>> results = idb.fetchRows(query);
        //System.out.println("Results size: " + results.size());
        
         DefaultTableModel model = new DefaultTableModel(
            new String[] { "Anställd-ID", "Namn", "Projekt-ID" }, 0
        );
        Anstalldatable.setModel(model);
        
        if (results != null) {
            
            for (HashMap<String, String> row : results) {
                String handlaggarid = row.get("anstalld_id");
                String fornamn = row.get("fornamn");
                String efternamn = row.get("efternamn");
                String projektId = row.get("pid");

                model.addRow(new Object[] {
                    handlaggarid,
                    fornamn + " " + efternamn,
                    projektId
                });
                
                //System.out.println("Results: " + results);
            }
        }
    } catch (InfException e) {

        JOptionPane.showMessageDialog(this, "Fel vid hämtning av handläggare: " + e.getMessage());
    }
  }
    
     private void populateHandlaggarComboBox() {
    try {
         jComboBox1.removeAllItems(); 
        String query = "SELECT h.aid, a.fornamn, a.efternamn " +
        "FROM handlaggare h " +
        "JOIN anstalld a ON h.aid = a.aid";
        ArrayList<HashMap<String, String>> results = idb.fetchRows(query);

        jComboBox1.removeAllItems(); 
        if (results != null) {
            for (HashMap<String, String> handlaggare : results) {
                String handlaggarid = handlaggare.get("aid");
                String fornamn = handlaggare.get("fornamn");
                String efternamn = handlaggare.get("efternamn");
                String item = handlaggarid + " - " + fornamn + " " + efternamn;
                jComboBox1.addItem(item);
            }
        }
    } catch (InfException e) {
        JOptionPane.showMessageDialog(this, "Fel vid hämtning av handläggare: " + e.getMessage());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        Anstalldatable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        LaggTillAnstalld = new javax.swing.JButton();
        TaBortAnstalld = new javax.swing.JButton();
        tillbaka = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Anstalldatable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(Anstalldatable);

        jLabel1.setText("Redigera handläggare för mina projekt");

        LaggTillAnstalld.setText("Lägg till");
        LaggTillAnstalld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaggTillAnstalldActionPerformed(evt);
            }
        });

        TaBortAnstalld.setText("Ta bort");
        TaBortAnstalld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TaBortAnstalldActionPerformed(evt);
            }
        });

        tillbaka.setText("Tillbaka");
        tillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tillbakaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LaggTillAnstalld)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TaBortAnstalld)
                            .addComponent(tillbaka))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(296, 296, 296)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LaggTillAnstalld))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TaBortAnstalld)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tillbaka)
                        .addGap(14, 14, 14))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void LaggTillAnstalldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaggTillAnstalldActionPerformed
        String staffAID = JOptionPane.showInputDialog(this, "Ange aid för handläggaren:");

        if (staffAID != null && !staffAID.isEmpty()) {
            try {
                
                String query = "INSERT INTO ans_proj (aid, pid) VALUES ('" + staffAID + "', '" + pid + "')";
                idb.insert(query);
                JOptionPane.showMessageDialog(this, "Handläggare tillagd!");
                displayStaff();
            } catch (InfException e) {
                JOptionPane.showMessageDialog(this, "Fel vid tillägg av handläggaren: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ange ett giltigt AID.");
        }
    }//GEN-LAST:event_LaggTillAnstalldActionPerformed

    private void tillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tillbakaActionPerformed
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_tillbakaActionPerformed

    private void TaBortAnstalldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TaBortAnstalldActionPerformed
        int selectedRow = Anstalldatable.getSelectedRow();
        if (selectedRow != -1) {
            String aidToDelete = (String) Anstalldatable.getValueAt(selectedRow, 0); // Hämta AID från den valda raden

            try {
     
                String query = "DELETE FROM ans_proj WHERE aid = '" + aidToDelete + "' AND pid = '" + pid + "'";
                idb.delete(query);
                JOptionPane.showMessageDialog(this, "Handläggare tas bort");
                displayStaff(); 
            } catch (InfException e) {
                JOptionPane.showMessageDialog(this, "Lyckades ej ta bort handläggare: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Välj en handläggare att ta bort.");
        }
    }//GEN-LAST:event_TaBortAnstalldActionPerformed
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Anstalldatable;
    private javax.swing.JButton LaggTillAnstalld;
    private javax.swing.JButton TaBortAnstalld;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton tillbaka;
    // End of variables declaration//GEN-END:variables
}
