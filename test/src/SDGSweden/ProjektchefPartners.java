package SDGSweden;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author fredde
 */
public class ProjektchefPartners extends javax.swing.JFrame {
    private String aid;
    private InfDB idb;
    private String pid;
    private Validering validering;

    /**
     * Creates new form ProjektchefPartners
     */
    public ProjektchefPartners(InfDB idb, String aid) {
        initComponents();
        this.idb = idb;
        this.aid = aid;
        this.validering = new Validering(idb);
        populatePartnersComboBox();
        displayPartnersForProjects();
    }
    
    private void displayPartnersForProjects() {
        try {
           /** String query = "SELECT " +
            "partner.pid, " +
            "partner.namn, " +
            "partner.kontaktperson, " +
            "partner.kontaktepost, " +
            "partner.telefon, " +
            "partner.adress, " +
            "partner.branch, " +
            "partner.stad " +
            "FROM partner " +
            "JOIN projekt_partner ON partner.pid = partner_pid " + 
            "JOIN projekt ON projekt_partner.pid = projekt.pid " +
            "JOIN ans_proj ON projekt.pid = ans_proj.pid " +
            "WHERE aid = '" + aid + "';";      */
            String query = "SELECT p.pid + 0 AS projekt_id, p.projektnamn, pa.pid + 0 AS partner_id, pa.namn AS partnernamn " +
               "FROM projekt p " +
               "LEFT JOIN projekt_partner pp ON p.pid = pp.pid " +
               "LEFT JOIN partner pa ON pp.partner_pid = pa.pid " +
               "WHERE p.projektchef = " + aid + ";";
           
            System.out.println(query);

            ArrayList<HashMap<String, String>> results = idb.fetchRows(query);
               
            if (results != null) {
                
                DefaultTableModel model = new DefaultTableModel(
                    new String []{"Partner-ID", "Partnernamn", "Projektnamn", "Projekt-ID"}, 0 );
                jTable1.setModel(model);
                for (HashMap<String, String> row : results) {
                    System.out.println(row);
                    model.addRow(new Object[]{
                        row.get("partner_id"),
                        row.get("namn"),
                        row.get("projektnamn"),
                        row.get("projekt_id")
                    });
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Inga partners hittades för dina projekt!");
            }
        } catch (InfException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Fel vid hämtning av projekt: " + e.getMessage());
        }
    }
    
            
    private void populatePartnersComboBox() {
    try {
         jComboBox1.removeAllItems(); 
        String query  = "SELECT pid, namn FROM partner";
        ArrayList<HashMap<String, String>> results = idb.fetchRows(query);

        jComboBox1.removeAllItems(); 
        if (results != null) {
            for (HashMap<String, String> partner : results) {
                String item = partner.get("pid") + " - " + partner.get("namn");
                jComboBox1.addItem(item);
            }
        }
    } catch (InfException e) {
        JOptionPane.showMessageDialog(this, "Fel vid hämtning av partners: " + e.getMessage());
    }
}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        laggtill = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Välj partner");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Lägg till eller ta bort Partner ifrån mina projekt");

        laggtill.setText("Lägg till");
        laggtill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laggtillActionPerformed(evt);
            }
        });

        jButton2.setText("Ta bort");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Tillbaka");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(laggtill)
                            .addComponent(jButton2)
                            .addComponent(jButton3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(laggtill)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
                
    private void laggtillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laggtillActionPerformed
String selectedItem = (String) jComboBox1.getSelectedItem();
    if (selectedItem != null) {
        int selectedRow = jTable1.getSelectedRow();
        String partnerId = selectedItem.split(" - ")[0];
        String projektId = jTable1.getValueAt(selectedRow, 3).toString();
        
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Vill du lägga till partnern i projektet?",
            "Bekräfta",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                String query = "INSERT INTO projekt_partner (pid, partner_pid) VALUES (" + projektId + ", " + partnerId + ")";
                idb.insert(query);
                JOptionPane.showMessageDialog(this, "Partner tillagd!");
                displayPartnersForProjects();
            } catch (InfException e) {
                JOptionPane.showMessageDialog(this, "Fel vid tillägg av partner: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_laggtillActionPerformed
}
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            String partnerId = jTable1.getValueAt(selectedRow, 0).toString();
            String projektId = jTable1.getValueAt(selectedRow, 3).toString();
            System.out.println(selectedRow);
            System.out.println("partnerId" + partnerId);
            System.out.println("projektId" + projektId);
            
            try {
                String query = "DELETE FROM projekt_partner WHERE partner_pid = '" + partnerId + "' AND pid = " + projektId + "";
                JOptionPane.showMessageDialog(this, query);
                idb.delete(query);
                JOptionPane.showMessageDialog(this, "Partner raderades!");
                displayPartnersForProjects(); 
            } catch (InfException e) {
                JOptionPane.showMessageDialog(this, "Ett fel inträffade vid radering av partner: " + e.getMessage());
                
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vänligen välj en partner att ta bort!");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton laggtill;
    // End of variables declaration//GEN-END:variables
}
